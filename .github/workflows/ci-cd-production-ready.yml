name: Production-Ready CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v1

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npm run type-check

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bakermaiden_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: npm run db:test:setup
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bakermaiden_test

    - name: Run unit tests
      run: npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bakermaiden_test

    - name: Run database tests
      run: npm run test:db
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bakermaiden_test

    - name: Run component tests
      run: npm run test:components

    - name: Run traceability tests
      run: npm run test:traceability
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bakermaiden_test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml

  build-and-validate:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache Next.js build
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Validate build output
      run: |
        if [ ! -f ".next/BUILD_ID" ]; then
          echo "Build failed - no BUILD_ID found"
          exit 1
        fi
        echo "✅ Build validation passed"

    - name: Check bundle size
      run: |
        BUNDLE_SIZE=$(find .next/static -name "*.js" -exec cat {} \; | wc -c)
        echo "Total bundle size: $BUNDLE_SIZE bytes"
        if [ $BUNDLE_SIZE -gt 5000000 ]; then # 5MB limit
          echo "⚠️ Bundle size exceeds 5MB limit"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: |
          .next/
          !.next/cache
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level high

    - name: Check for vulnerable dependencies
      run: |
        VULNERABILITIES=$(npm audit --json --audit-level high | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
        if [ "$VULNERABILITIES" != "0" ]; then
          echo "❌ High/Critical vulnerabilities found"
          npm audit --audit-level high
          exit 1
        fi
        echo "✅ No critical vulnerabilities found"

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: .next/

    - name: Install dependencies
      run: npm ci

    - name: Start application
      run: npm start &
      env:
        NODE_ENV: production

    - name: Wait for app to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 1; done'

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-validate, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: .next/

    - name: Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-args: '--env NODE_ENV=staging'
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-validate, security-scan, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: .next/

    - name: Pre-deployment health check
      run: |
        curl -f https://bakermaiden-staging.vercel.app/api/health || exit 1
        echo "✅ Staging health check passed"

    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}

    - name: Post-deployment verification
      run: |
        sleep 30 # Allow deployment to propagate
        curl -f https://bakermaiden.vercel.app/api/health || exit 1
        echo "✅ Production deployment verified"

    - name: Notify team
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Production deployment ${{ job.status }}!
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up artifacts
      uses: geekyeggo/delete-artifact@v4
      with:
        name: |
          build-output
          test-results